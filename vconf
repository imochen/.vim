"中文编码支持
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,latin1


"配置vim文件主目录
if has("unix")
	let $VIMFILES=$HOME."/.vim"
else
	let $VIMFILES=$VIM."/vimfiles"
endif

"处理consle输出乱码 
language messages zh_CN.utf-8

"设置不明字符宽度
set ambiwidth=double

"禁用vi兼容模式
set nocompatible

" 设置 ctags 路径
let g:tagbar_ctags_bin='/Volumes/HHD/opt/ctags/bin/ctags'

"set paste

"配色方案
"dark===
"color molokai
"color d_baycomb
"color d_maroloccio
"color d_maroloccio2
"color d_midnightmoonlight
"ok
"color maroloccio2
"
"------------"
"color paintbox
"------------"

"light
color cage
"color lucius
"color l_earendel
"color l_eclipse
"color l_emacs
"color l_guardian
"color l_habiLight
"color l_njk
"color l_tolerable
"color l_vylight
"color peaksea
"color busybee
"color midnightmoonlight


"pathogen
"call pathogen#infect()

"设置-连字符
set iskeyword+=-

"the theme solarized
"set background=dark
"colorscheme solarized

"默认区分大小写
set noignorecase

"设置冒号命令和搜索命令历史列表的长度
set history=9999

"禁用鼠标
set mouse=

"设定退格键和delete键
set backspace=indent,eol,start

"输入搜索内容时就显示搜索结果
set incsearch
set nohls

"搜索结果高亮显示
set hlsearch

"搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set ignorecase smartcase

"Grep插件
nnoremap <silent> <F3> :Grep<CR>

"tab宽度为四个字符
set tabstop=4


autocmd filetype python 				set dictionary=$VIMFILES/dict/python.dict
autocmd filetype python 				set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype javascript 			set dictionary=$VIMFILES/dict/javascript.dict
autocmd filetype javascript 			set dictionary+=$VIMFILES/dict/node.dict
autocmd filetype javascript 			set dictionary+=$VIMFILES/dict/css.dict
autocmd filetype javascript 			set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype html 					set dictionary=$VIMFILES/dict/html.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/css.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/javascript.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/node.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype css 					set dictionary=$VIMFILES/dict/css.dict
autocmd filetype css 					set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype css 					set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype less 					set dictionary=$VIMFILES/dict/css.dict
autocmd filetype less 					set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype less 					set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype scss.css 				set dictionary=$VIMFILES/dict/css.dict
autocmd filetype scss.css 				set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype scss.css 				set dictionary+=$VIMFILES/dict/word.dict
autocmd filetype sass.css 				set dictionary=$VIMFILES/dict/css.dict
autocmd filetype sass.css 				set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype sass.css 				set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype php 					set dictionary=$VIMFILES/dict/php.dict
autocmd filetype php 					set dictionary+=$VIMFILES/dict/css.dict
autocmd filetype php 					set dictionary+=$VIMFILES/dict/javascript.dict
autocmd filetype php 					set dictionary+=$VIMFILES/dict/node.dict
autocmd filetype php 					set dictionary=$VIMFILES/dict/word.dict



"以下文件格式时自动将tab缩进转换为空格
"all
set expandtab
"au BufRead,BufNewFile *.py set filetype=python expandtab
"au BufRead,BufNewFile *.js set filetype=javascript expandtab
"au BufRead,BufNewFile *.css set filetype=css expandtab
"au BufRead,BufNewFile *.less set filetype=less expandtab
"au BufRead,BufNewFile *.scss set filetype=scss expandtab
"au BufRead,BufNewFile *.scss set filetype=scss.css expandtab
"au BufRead,BufNewFile *.sass set filetype=sass expandtab
"au BufRead,BufNewFile *.sass set filetype=sass.css expandtab

"禁用声音提示
set vb t_vb=

"开启新行时自动智能缩进
set smartindent
set shiftwidth=4

"设置自动缩进
"set autoindent
"set cindent
"set nosmartindent
"set noautoindent

"自动识别文件类型
filetype on
filetype plugin on
filetype plugin indent on

"对just文件使用html语法高亮
au BufNewFile,BufRead *.just set filetype=html
au BufNewFile,BufRead *.jade set filetype=html

"在状态栏显示目前所执行的指令，未完成的指令片段也会显示出来
set showcmd

"显示行号
set number

"关闭备份
set nobackup

"设置匹配模式
set showmatch

"显示光标的状态行
"set guioptions-=T

"开始折叠
set foldenable
set foldmethod=indent
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

"语法高亮
syntax enable
syntax on

"设置tags
set tags=tags

"自动切换目录到当前文件所在的目录
set autochdir

"设置tags
"set tags=/var/www/tags

"设置taglist
""let Tlist_Show_One_File=1
""let Tlist_Exit_OnlyWindow=1
""let Tlist_Auto_Open=1
""let Tlist_File_Fold_Auto_Colse=1
""let Tlist_Process_File_Always=1

"文件目录窗口
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap mw :WMToggle<cr>
let g:AutoOpenWinManager=1

"多文件编辑
""let g:miniBufExplMapCTabSwitchBufs=1
""let g:miniBufExplMapWindowsNavVim=1
""let g:miniBufExplMapWindowNavArrows=1
""let g:miniBufExplModSelTarget = 1
""let g:miniBufExplMapCTabSwitchWindows=1
""let g:miniBufExplorerMoreThanOne=1

"打开javascript对dom、html和css的支持
let javascript_enable_domhtmlcss=1

"打开javascript折叠
let b:javascript_fold=1

"去掉html中a标签的下划线
let html_no_rendering=1

"命令行补全
set wildmenu

"实现括号的自动配对后防止重复输入），适用python
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endf

"自动括号补全
inoremap ( ()<ESC>i
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap { {}<ESC>i
inoremap } <c-r>=ClosePair('}')<CR>
inoremap [ []<ESC>i
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap " ""<ESC>i
inoremap ' ''<ESC>i

"字典补全
inoremap <c-k> <C-X><C-K>

"补全全行
inoremap <c-l> <C-X><C-L>

"文件补全
inoremap <c-f> <C-X><C-F>

"normal模式下的快捷键
nmap j gj
nmap k gk
nmap <s-tab> :bn<cr>

"调整窗口大小
nmap <s-up> <c-w>+5<c-w>+5<ESC>
nmap <s-down> <c-w>-5<c-w>-5<ESC>
nmap <s-left> <c-w>>5<c-w>>5<ESC>
nmap <s-right> <c-w><5<c-w><5<ESC>
nmap <s-m> <c-w>>2000<c-w>>2000<c-w>+2000<c-w>+2000<ESC>

nmap <silent> <F1> <c-w>>5<c-w>>5<ESC>
nmap <silent> <F2> <c-w><5<c-w><5<ESC>

"重复find操作
nmap , ;
vmap , ;

"选中状态下单行移动
vmap j gj
vmap k gk

"复制粘贴
vmap <c-y> "+y
nmap <c-p> "+p

"显示状态栏
set laststatus=2

"状态栏显示的信息 set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\
set statusline=\ %<%F[%1*%*%n%R%H]%M%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l[%p%%]\|%L%)
"%c:%l\|%L%)

" 让 Tohtml 产生有 CSS 语法的 html
let html_use_css=1

" 设置字典 ~/.vim/dict/文件的路径
set complete+=k
autocmd filetype python 				set dictionary=$VIMFILES/dict/python.dict
autocmd filetype python 				set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype javascript 			set dictionary=$VIMFILES/dict/javascript.dict
autocmd filetype javascript 			set dictionary+=$VIMFILES/dict/node.dict
autocmd filetype javascript 			set dictionary+=$VIMFILES/dict/css.dict
autocmd filetype javascript 			set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype html 					set dictionary=$VIMFILES/dict/html.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/css.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/javascript.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/node.dict
autocmd filetype html 					set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype css 					set dictionary=$VIMFILES/dict/css.dict
autocmd filetype css 					set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype css 					set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype less 					set dictionary=$VIMFILES/dict/css.dict
autocmd filetype less 					set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype less 					set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype scss.css 				set dictionary=$VIMFILES/dict/css.dict
autocmd filetype scss.css 				set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype scss.css 				set dictionary+=$VIMFILES/dict/word.dict
autocmd filetype sass.css 				set dictionary=$VIMFILES/dict/css.dict
autocmd filetype sass.css 				set dictionary+=$VIMFILES/dict/html.dict
autocmd filetype sass.css 				set dictionary+=$VIMFILES/dict/word.dict

autocmd filetype php 					set dictionary=$VIMFILES/dict/php.dict
autocmd filetype php 					set dictionary+=$VIMFILES/dict/css.dict
autocmd filetype php 					set dictionary+=$VIMFILES/dict/javascript.dict
autocmd filetype php 					set dictionary+=$VIMFILES/dict/node.dict
autocmd filetype php 					set dictionary=$VIMFILES/dict/word.dict

"自动补全插件-neocomplcache
"let g:neocomplcache_enable_at_startup=1

"jquery插件
au BufRead,BufNewFile *.js set filetype=javascript syntax=jquery

"ejs
au BufRead,BufNewFile *.ejs set filetype=html syntax=html

"命令行高度
set cmdheight=1

"设置标尺
set ruler

"隐藏垂直方向滚动条"
"if has("gui_running")
	"set guioptions-=l
	"set guioptions-=L
	"set guioptions-=r
	"set guioptions-=R
"endif

"菜单栏隐藏与显示切换
"set guioptions-=m
"set guioptions-=T
"map <silent> <F2> :if &guioptions =~# 'T' <Bar>
"        \set guioptions-=T <Bar>
"        \set guioptions-=m <bar>
"    \else <Bar>
"        \set guioptions+=T <Bar>
"        \set guioptions+=m <Bar>
"    \endif<CR>

"html标签自动补全
"function! InsertHtmlTag()
        "let pat = '\c<\w\+\s*\(\s\+\w\+\s*=\s*[''#$;,()."a-z0-9]\+\)*\s*>'
        "normal! a>
        "let save_cursor = getpos('.')
        "let result = matchstr(getline(save_cursor[1]), pat)
        "if (search(pat, 'b', save_cursor[1]) && searchpair('<','','>','bn',0,  getline('.')) > 0)
        ""if (search(pat, 'b', save_cursor[1]))
           "normal! lyiwf>
           "normal! a</
           "normal! p
           "normal! a>
        "endif
        ":call cursor(save_cursor[1], save_cursor[2], save_cursor[3])
"endfunction
		"inoremap > <ESC>:call InsertHtmlTag()<CR>a

"zencoding 快捷键
let g:user_zen_settings = { 
  \  'indentation' : '  ', 
  \  'perl' : { 
  \    'aliases' : { 
  \      'req' : 'require ' 
  \    }, 
  \    'snippets' : { 
  \      'use' : "use strict\nuse warnings\n\n", 
  \      'warn' : "warn \"|\";", 
  \    } 
  \  } 
  \} 
  let g:user_zen_expandabbr_key = '<c-e>'
  let g:use_zen_complete_tag = 1
""nmap <c-e> <c-y>,
""vmap <c-e> <c-y>,
""inoremap <c-e> <c-y>,

"让vim支持系统剪贴板
vmap "+y :w !pbcopy<CR><CR>
nmap "+p :r !pbpaste<CR><CR>

set cursorline
set cursorcolumn

"set list lcs=tab:\|\ 
"let g:indentLine_color_term = 1
"let g:indentLine_char = '┊'

"文件在外部被修改时，自动加载
set autoread

" If you are using a console version of Vim, or dealing
" with a file that changes externally (e.g. a web server log)
" then Vim does not always check to see if the file has been changed.
" The GUI version of Vim will check more often (for example on Focus change),
" and prompt you if you want to reload the file.
"
" There can be cases where you can be working away, and Vim does not
" realize the file has changed. This command will force Vim to check
" more often.
"
" Calling this command sets up autocommands that check to see if the
" current buffer has been modified outside of vim (using checktime)
" and, if it has, reload it for you.
"
" This check is done whenever any of the following events are triggered:
" * BufEnter
" * CursorMoved
" * CursorMovedI
" * CursorHold
" * CursorHoldI
"
" In other words, this check occurs whenever you enter a buffer, move the cursor,
" or just wait without doing anything for 'updatetime' milliseconds.
"
" Normally it will ask you if you want to load the file, even if you haven't made
" any changes in vim. This can get annoying, however, if you frequently need to reload
" the file, so if you would rather have it to reload the buffer *without*
" prompting you, add a bang (!) after the command (WatchForChanges!).
" This will set the autoread option for that buffer in addition to setting up the
" autocommands.
"
" If you want to turn *off* watching for the buffer, just call the command again while
" in the same buffer. Each time you call the command it will toggle between on and off.
"
" WatchForChanges sets autocommands that are triggered while in *any* buffer.
" If you want vim to only check for changes to that buffer while editing the buffer
" that is being watched, use WatchForChangesWhileInThisBuffer instead.
"
command! -bang WatchForChanges                  :call WatchForChanges(@%,  {'toggle': 1, 'autoread': <bang>0})
command! -bang WatchForChangesWhileInThisBuffer :call WatchForChanges(@%,  {'toggle': 1, 'autoread': <bang>0, 'while_in_this_buffer_only': 1})
command! -bang WatchForChangesAllFile           :call WatchForChanges('*', {'toggle': 1, 'autoread': <bang>0})

" WatchForChanges function
"
" This is used by the WatchForChanges* commands, but it can also be
" useful to call this from scripts. For example, if your script executes a
" long-running process, you can have your script run that long-running process
" in the background so that you can continue editing other files, redirects its
" output to a file, and open the file in another buffer that keeps reloading itself
" as more output from the long-running command becomes available.
"
" Arguments:
" * bufname: The name of the buffer/file to watch for changes.
"     Use '*' to watch all files.
" * options (optional): A Dict object with any of the following keys:
"   * autoread: If set to 1, causes autoread option to be turned on for the buffer in
"     addition to setting up the autocommands.
"   * toggle: If set to 1, causes this behavior to toggle between on and off.
"     Mostly useful for mappings and commands. In scripts, you probably want to
"     explicitly enable or disable it.
"   * disable: If set to 1, turns off this behavior (removes the autocommand group).
"   * while_in_this_buffer_only: If set to 0 (default), the events will be triggered no matter which
"     buffer you are editing. (Only the specified buffer will be checked for changes,
"     though, still.) If set to 1, the events will only be triggered while
"     editing the specified buffer.
"   * more_events: If set to 1 (the default), creates autocommands for the events
"     listed above. Set to 0 to not create autocommands for CursorMoved, CursorMovedI,
"     (Presumably, having too much going on for those events could slow things down,
"     since they are triggered so frequently...)
function! WatchForChanges(bufname, ...)
  " Figure out which options are in effect
  if a:bufname == '*'
    let id = 'WatchForChanges'.'AnyBuffer'
    " If you try to do checktime *, you'll get E93: More than one match for * is given
    let bufspec = ''
  else
    if bufnr(a:bufname) == -1
      echoerr "Buffer " . a:bufname . " doesn't exist"
      return
    end
    let id = 'WatchForChanges'.bufnr(a:bufname)
    let bufspec = a:bufname
  end

  if len(a:000) == 0
    let options = {}
  else
    if type(a:1) == type({})
      let options = a:1
    else
      echoerr "Argument must be a Dict"
    end
  end
  let autoread    = has_key(options, 'autoread')    ? options['autoread']    : 0
  let toggle      = has_key(options, 'toggle')      ? options['toggle']      : 0
  let disable     = has_key(options, 'disable')     ? options['disable']     : 0
  let more_events = has_key(options, 'more_events') ? options['more_events'] : 1
  let while_in_this_buffer_only = has_key(options, 'while_in_this_buffer_only') ? options['while_in_this_buffer_only'] : 0

  if while_in_this_buffer_only
    let event_bufspec = a:bufname
  else
    let event_bufspec = '*'
  end

  let reg_saved = @"
  "let autoread_saved = &autoread
  let msg = "\n"

  " Check to see if the autocommand already exists
  redir @"
    silent! exec 'au '.id
  redir END
  let l:defined = (@" !~ 'E216: No such group or event:')

  " If not yet defined...
  if !l:defined
    if l:autoread
      let msg = msg . 'Autoread enabled - '
      if a:bufname == '*'
        set autoread
      else
        setlocal autoread
      end
    end
    silent! exec 'augroup '.id
      if a:bufname != '*'
        "exec "au BufDelete    ".a:bufname . " :silent! au! ".id . " | silent! augroup! ".id
        "exec "au BufDelete    ".a:bufname . " :echomsg 'Removing autocommands for ".id."' | au! ".id . " | augroup! ".id
        exec "au BufDelete    ".a:bufname . " execute 'au! ".id."' | execute 'augroup! ".id."'"
      end
        exec "au BufEnter     ".event_bufspec . " :checktime ".bufspec
        exec "au CursorHold   ".event_bufspec . " :checktime ".bufspec
        exec "au CursorHoldI  ".event_bufspec . " :checktime ".bufspec

      " The following events might slow things down so we provide a way to disable them...
      " vim docs warn:
      "   Careful: Don't do anything that the user does
      "   not expect or that is slow.
      if more_events
        exec "au CursorMoved  ".event_bufspec . " :checktime ".bufspec
        exec "au CursorMovedI ".event_bufspec . " :checktime ".bufspec
      end
    augroup END
    let msg = msg . 'Now watching ' . bufspec . ' for external updates...'
  end

  " If they want to disable it, or it is defined and they want to toggle it,
  if l:disable || (l:toggle && l:defined)
    if l:autoread
      let msg = msg . 'Autoread disabled - '
      if a:bufname == '*'
        set noautoread
      else
        setlocal noautoread
      end
    end
    " Using an autogroup allows us to remove it easily with the following
    " command. If we do not use an autogroup, we cannot remove this
    " single :checktime command
    " augroup! checkforupdates
    silent! exec 'au! '.id
    silent! exec 'augroup! '.id
    let msg = msg . 'No longer watching ' . bufspec . ' for external updates.'
  elseif l:defined
    let msg = msg . 'Already watching ' . bufspec . ' for external updates'
  end

  "echo msg
  let @"=reg_saved
endfunction


let autoreadargs={'autoread':1}
execute WatchForChanges("*",autoreadargs)

"powerLine
"let g:Powerline_theme="skwp"
"let g:Powerline_colorscheme="skwp"
let g:Powerline_symbols = "fancy"


"快速格式化缩进
nmap //= :Tab /=<cr>
nmap //: :Tab /:<cr>
nmap //\| :Tab /\|<cr>
nmap //, :Tab /,<cr>
nmap //+ :Tab /+<cr>
nmap //- :Tab /-<cr>
vmap //= :Tab /=<cr>
vmap //: :Tab /:<cr>
vmap //\| :Tab /\|<cr>
vmap //, :Tab /,<cr>
vmap //+ :Tab /+<cr>
vmap //- :Tab /-<cr>

"插入当前日期
nmap <silent> <F5> a<CR><ESC>k:r! date \+\%F\ \%T<CR>kJJ
inoremap <silent> <F5> <CR><ESC>k:r! date \+\%F\ \%T<CR>kJJa

"vimim词库位置
"let g:vimim_plugin="/Users/cage/Documents/data"
"let g:vimim_mode='static'
"let g:vimim_map='c-bslash'
let g:vimim_cloud='qq.fuzzy'
"let g:vimim_cloud='sogou'
"let g:vimim_cloud='baidu'
"let g:vimim_cloud='google'
let g:vimim_map='no-gi'
"let g:vimim_cloud='sogou'

"窗口切换
"nmap <c-h> <c-w>h option-h
nmap <c-h> <c-w>h
"nmap ˙    <c-w>h
"nmap <c-j> <c-w>j option-j
nmap <c-j> <c-w>j
"nmap  ∆		<c-w>j
"nmap <c-k> <c-w>k option-k 
nmap <c-k> <c-w>k
"nmap  ˚	<c-w>k
"nmap <c-l> <c-w>l option-l
nmap <c-l> <c-w>l
"nmap ¬     <c-w>l

"在下方复制整个元素Option-o
nmap ø  ≥yP≤j

"在上方复制整个元素Option-O
nmap Ø  ≥yP

"标签间跳转 Option-<
nmap ≤  $\5
vmap ≤  $\5

"选中标签 Option->
nmap ≥ $V\5

"展开折叠 Option-r
nmap ® zR
nmap mr zR

"插入模式左移光标 Option-b
inoremap ∫ <left>

"插入模式右移光标 Option-f
inoremap ƒ <right>

"删除到行首
nmap X ld^

"插入模式上移光标 Option-k
inoremap ˚ <up>

"插入模式下移光标 Option-j
inoremap ∆ <down>


"到行首Option-q
inoremap œ <ESC>I
nmap œ ^
vmap œ ^

"到行尾Option-p
inoremap π <ESC>A
nmap π $
vmap π $

"跳到结尾Option-g
nmap © G
vmap © G

"删除到行首
inoremap <silent> <F1> <ESC>v^c

"删除到行尾
inoremap <silent> <F2> <ESC>lC

"括号间移动Option-'
nmap æ %
vmap æ %

"上一个句子Option-9
nmap ª (
vmap ª (

"下一个句子Option-0
nmap º )
vmap º )

"下翻半屏Option-f
nmap ∆ <c-d>
vmap ∆ <c-d>

"下翻半屏Option-x
nmap ≈ <c-f>
vmap ≈ <c-f>


"上翻半屏Option-k
nmap ˚ <c-u>
vmap ˚ <c-u>

"上翻半屏Option-m
nmap µ 	<c-b>
vmap µ 	<c-b>

"上一行进入插入模式 Option-x
inoremap ≈ <ESC>O

"下一行进入插入模式 Option-m
inoremap µ 	<ESC>o

nmap gt Gzt
nmap gb Gzz

"select all
nmap gv ggVG
vmap gv <ESC>ggVG

nmap gu Vgu
nmap gU VgU

"python语法错误着色
if has("gui_running") 
	highlight SpellBad term=underline gui=undercurl guisp=Black
else
	highlight SpellBad ctermfg=124 ctermbg=16 cterm=bold
endif

"syntastic icon
let g:syntastic_check_on_open=1
let g:syntastic_error_symbol='↪'
let g:syntastic_warning_symbol='↪'
let g:syntastic_style_error_symbol='↪'
let g:syntastic_style_warning_symbol='↪'
let g:syntastic_auto_loc_list=1
"let g:syntastic_auto_jump=1
let g:syntastic_mode_map = {'mode' : 'active',
							\'active_filetypes' : [],
							\'passive_filetypes' : ['html', 'xhtml']}

"nmap <silent> <F8> :TagbarToggle<CR>
nmap mt :TagbarToggle<CR>
let g:tagbar_right=1
let g:tagbar_width=19


"nmap mc :ToggleRaibowParenthesis<CR>

"为以下文件类型添加代码长度界限
au BufRead,BufNewFile *.py 		set colorcolumn=120
au BufRead,BufNewFile *.js 		set colorcolumn=120
au BufRead,BufNewFile *.php 	set colorcolumn=120
au BufRead,BufNewFile *.css 	set colorcolumn=120
au BufRead,BufNewFile *.vim 	set colorcolumn=120
au BufRead,BufNewFile *.less 	set colorcolumn=120

nmap yii yi"
nmap yiI yi'

nmap cii ci"
nmap ciI ci'

nmap dii di"
nmap diI di'

nmap vii vi"
nmap viI vi'



nmap mf :NERDTree<cr>
let NERDChristmasTree=3
let NERDTreeShowHidden=1
let NERDTreeChDirMode=1
let NERDChristmasTree=1
let NERDTreeWinSize=32
let NERDTreeHighlightCursorline=1
